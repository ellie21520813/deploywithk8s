pipeline {
  agent any
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed 1'
        checkout scm
      }
    }

    stage('Static Code Analysis') {
        environment {
            SONAR_URL = "http:98.84.150.86//:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            sonar-scanner \
                -Dsonar.projectKey=your-project-key \
                -Dsonar.sources=. \
                -Dsonar.host.url=${SONAR_URL} \
                 -Dsonar.login=$SONAR_AUTH_TOKEN
            '''
        }
      }
    }
    stage('Docker Build & Push') {
        environment {
        DOCKER_IMAGE_1 = "nh6462/lab2_be:${BUILD_NUMBER}"
        DOCKER_IMAGE_2 = "nh6462/lab2_fe:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            parallel {
                stage('Docker Build for  be') {
                    steps {
                        script {
                            sh 'cd deploywithk8s/backend &&  docker build -t ${DOCKER_IMAGE_1} .'
                            def dockerImage = docker.image("${DOCKER_IMAGE_1}")
                            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                                dockerImage.push()
                                echo "Pushed image: ${DOCKER_IMAGE_1} successfully!"
                                }
                            }
                        }
                    }
                stage('Docker Build fe') {
                    steps {
                        script {
                            sh 'cd deploywithk8s/frontend &&  docker build -t ${DOCKER_IMAGE_2} .'
                            def dockerImage = docker.image("${DOCKER_IMAGE_2}")
                            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                                dockerImage.push()
                                 echo "Pushed image: ${DOCKER_IMAGE_2} successfully!"
                                }
                            }
                        }
                    }
            }
        }
    stage('Deploy') {
        steps {
            echo 'Deploying....'
            sh 'kubectl apply -f k8s/backend-deployment.yaml'
            sh 'kubectl apply -f k8s/frontend-deployment.yaml'
            }
        }
  }
}